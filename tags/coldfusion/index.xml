<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coldfusion on Barrett Otte</title><link>https://barrettotte.github.io/tags/coldfusion/</link><description>Recent content in coldfusion on Barrett Otte</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://barrettotte.github.io/tags/coldfusion/index.xml" rel="self" type="application/rss+xml"/><item><title>ColdFusion log4shell</title><link>https://barrettotte.github.io/posts/2021/3/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/2021/3/</guid><description>In light of the &amp;ldquo;wonderful&amp;rdquo; log4j exploit, I was tasked with exploring my company&amp;rsquo;s ColdFusion codebase to see if it was exploitable. We are using a flavor of ColdFusion called Lucee.
In summary, Lucee 5.3.4 was not vulnerable. This fact was also confirmed in this official Lucee post.
This page will provide a basic interface to test the exploit described in https://github.com/leonjza/log4jpwn. See notes in bottom of source for initializing reverse shell.</description></item><item><title>ColdFusion Service Pinger</title><link>https://barrettotte.github.io/posts/2018/2/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/2018/2/</guid><description>At my job sometimes a few of the legacy services' health in the qa/dev environment decays and there are no robust health checks in place. So, one morning I coded up a quick and dirty page that product owners could hit to get a sanity check when they were checking features.
In summary, this ColdFusion page hits each listed service in the JSON and uses multithreading. This was the first time I ever messed around with multithreading in ColdFusion; It was easier than I thought.</description></item><item><title>ColdFusion cfexecute Example</title><link>https://barrettotte.github.io/posts/2018/1/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/2018/1/</guid><description>Since ColdFusion is very similar to PHP, I wanted to mess around with some of the less-used functions. cfexecute is a function that will pop a shell and execute a program.
In this example program, I just made a &amp;ldquo;wrapper&amp;rdquo; around ping.
execute.cfc
component name=&amp;quot;CF Execute Test&amp;quot; hint=&amp;quot;Messing around with cfexecute built in method.&amp;quot;{ public any function init(){ variables.system32Path = &amp;quot;C:\Windows\system32\&amp;quot;; variables.commands = { &amp;quot;ping&amp;quot;: variables.system32Path &amp;amp; &amp;quot;ping.exe&amp;quot; }; return this; } public struct function getCommandList(){ return variables.</description></item></channel></rss>