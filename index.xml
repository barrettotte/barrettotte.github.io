<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Barrett Otte</title><link>https://barrettotte.github.io/</link><description>Recent content on Barrett Otte</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://barrettotte.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Test Project!</title><link>https://barrettotte.github.io/projects/test/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/projects/test/</guid><description>Test</description></item><item><title>My Very First Program (2011)</title><link>https://barrettotte.github.io/posts/18/</link><pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/18/</guid><description>I&amp;rsquo;ve been digging around my old archived code and found a gem I have to record for myself.
1// HelloWorld.cpp 2 3// Barrett Otte 4// 9-06-11 5// Purpose: Demonstrate Dev Compiler 6 7# include &amp;lt;iostream&amp;gt; 8 9using namespace std; 10 11int main() 12{ 13 cout &amp;lt;&amp;lt; &amp;#34;Hello World\n&amp;#34; ; 14 system (&amp;#34;PAUSE&amp;#34;) ; 15 return 0; 16} 17 Man, just look at the formatting&amp;hellip;
Its hard to believe its been ~10 years since that first program in my first high school programming class.</description></item><item><title>ColdFusion log4shell</title><link>https://barrettotte.github.io/posts/15/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/15/</guid><description>In light of the &amp;ldquo;wonderful&amp;rdquo; log4j exploit, I was tasked with exploring my company&amp;rsquo;s ColdFusion codebase to see if it was exploitable. We are using a flavor of ColdFusion called Lucee.
In summary, Lucee 5.3.4 was not vulnerable. This fact was also confirmed in this official Lucee post.
This page will provide a basic interface to test the exploit described in https://github.com/leonjza/log4jpwn. See notes in bottom of source for initializing reverse shell.</description></item><item><title>Useless Information: QR Codes</title><link>https://barrettotte.github.io/posts/17/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/17/</guid><description>I randomly decided to learn about how QR codes work. It turns out there&amp;rsquo;s some pretty cool things to learn such as Reed-Solomon Error Correction and Galois Fields.
At my job I decided to give a &amp;ldquo;Lunch and Learn&amp;rdquo; about the basics of generating a QR code in Python. The QR code generated below is a link to my GitHub profile.
This presentation was done in a Jupyter notebook interactively and has not been converted to markdown at this time.</description></item><item><title>From Stones to Qubits: The Plan</title><link>https://barrettotte.github.io/posts/16/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/16/</guid><description>Summary/Purpose This book, From Stones to Qubits, will be my attempt to study, document, and teach how humanity developed computing from the Stone Age to modern day.
The history of computing is tangled up with mathematics, physics, materials science, electrical engineering, and more. So, this book will be multidisciplinary, but hopefully only cover the important pieces needed for computing. However, I already know there will be short optional detours into other topics that make sense to mention.</description></item><item><title>Projectile Motion and Introduction to Octo</title><link>https://barrettotte.github.io/posts/14/</link><pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/14/</guid><description>Introduction to Octo Octo is a high level assembler for an old virtual machine, CHIP-8, which was developed in the mid-1970s. Its a VM with some basic audio, graphics, and input. Game jams with constraints like this are the most fun.
I used the following resources to learn from:
Octo IDE Octo Assembly Language Manual A Beginner&amp;rsquo;s Guide to Programming with Chip8 An Intermediate Guide to Game Development with Chip8 Chip8 Programming Techniques Octojam 7 I intended on attending a game jam called Octojam 7 running from 10-01-2020 to 11-01-2020.</description></item><item><title>Jupyter Notebooks + IBM i</title><link>https://barrettotte.github.io/posts/13/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/13/</guid><description>Migrated post from DEV.to
This is going to be a short post on calling basic IBMi DB2 statements from Jupyter Notebooks. It is really light on explanation, so I encourage googling terms you are not familiar with.
Briefest Introduction to Jupyter Jupyter provides an environment for executing live code in a notebook like format. I find these especially useful for keeping &amp;ldquo;living notes&amp;rdquo; for mathematics and production support notes.
A notebook consists of cells, which allow you to mix and match SQL, Markdown, Python, Javascript, and much more in the same notebook.</description></item><item><title>TRS80-Twilio, Sending Texts Like its 1983!</title><link>https://barrettotte.github.io/posts/12/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/12/</guid><description>Migrated post from DEV.to
(This was a submission to a Twilio hackathon)
What I built Category Submission: Exciting X-Factors Send a text message from a TRS-80 Model 100 using the Twilio SMS API and an ESP8266.
The basic goal was to use a vintage computer as a frontend and an ESP8266 as a backend to send a text message.
As I state in my repository, In no way is this practical or should be recreated.</description></item><item><title>Sending a Text Message with Twilio and DB2 SQL</title><link>https://barrettotte.github.io/posts/11/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/11/</guid><description>Migrated post from DEV.to
This is going to be a pretty short post, but I thought it would be fun to share this in light of the Twilio + DEV hackathon this month. Honestly, I&amp;rsquo;m not sure if either project I planned out will be finished in time. This month went by way too fast, so the outlook is not good.
Since I&amp;rsquo;m still a pretty new IBMi developer, I found that the best way to learn this new world was to take a fun idea and see if it was possible to do with RPG and/or DB2 SQL.</description></item><item><title>Writing an IBM i Syntax Highlighter for VS Code</title><link>https://barrettotte.github.io/posts/10/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/10/</guid><description>Migrated post from DEV.to
Introduction I love VS Code and really want it to be the &amp;ldquo;all in one&amp;rdquo; editor. Unfortunately, there are still plenty of fringe cases that just don&amp;rsquo;t work yet.
To make a long stort short, I recently started working as an IBMi developer. Its a midrange system (the middle ground between standard server and mainframe) that uses an old programming language called RPG (https://en.wikipedia.org/wiki/IBM_RPG, the same era as COBOL and FORTRAN).</description></item><item><title>IBM i Joke Program</title><link>https://barrettotte.github.io/posts/9/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/9/</guid><description>My coworker found a really cool command called STRPCCMD that allows the 5250 emulator to execute commands on the client machine. So why not exploit it for a laugh&amp;hellip;
joke.clle
/* CALL BOLIB/JOKE */ /* Entry Path: C:\Users\Public\IBM\ClientSolutions */ PGM DCL VAR(&amp;amp;gist) TYPE(*CHAR) LEN(60) DCL VAR(&amp;amp;cmd) TYPE(*CHAR) LEN(120) CHGVAR VAR(&amp;amp;gist) VALUE('https://gist.github.com/' + || 'b6654e5606831f13f48887de39d67723.git') CHGVAR VAR(&amp;amp;cmd) VALUE('cmd /c &amp;quot;git clone ' || &amp;amp;gist || ' x' + || ' &amp;amp; powershell x/joke.</description></item><item><title>IBM i Book Chapters 1 and 2</title><link>https://barrettotte.github.io/posts/8/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/8/</guid><description>Migrated post from DEV.to
This is a post to say that I have &amp;ldquo;completed&amp;rdquo; the first two chapters of my small &amp;ldquo;book&amp;rdquo; Learning IBM i as a Lowly Web Developer. (Most of the core content is in an acceptable state, but may still be tweaked when I read it over for the millionth time).
The work in progress can be found at https://barrettotte.github.io/IBMi-Book/#/
Preface It should be obvious, but I&amp;rsquo;m not a writer and barely a programmer sometimes.</description></item><item><title>Game of Life in TSQL</title><link>https://barrettotte.github.io/posts/7/</link><pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/7/</guid><description>Migrated post from DEV.to
GIF can be seen here https://github.com/barrettotte/SQL-Game-of-Life/blob/master/demo.gif
One morning during my commute I was zoning out and realized I wanted to make a really dumb side project in SQL. One of my favorite things to do is use a language unconventionally and I thought implementing Game of Life was the perfect little project to do.
Game of Life If you are unfamiliar with Conway&amp;rsquo;s Game of Life, I encourage to read more about it here https://en.</description></item><item><title>Writing a Book with Docsify</title><link>https://barrettotte.github.io/posts/6/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/6/</guid><description>Migrated post from DEV.to
If you ever thought about writing a small book in the comfort of markdown/html then I would suggest using Docsify; https://github.com/docsifyjs/docsify
Docsify is pretty intuitive and has sufficient documentation to get you through the basics of putting together a book. Each directory is a section and each markdown file is a page in the book. It also has other features such as navigation, cover pages, and sidebars that I haven&amp;rsquo;t dove too deep into.</description></item><item><title>Utility to Pull Code from IBM i</title><link>https://barrettotte.github.io/posts/5/</link><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/5/</guid><description>Migrated post from DEV.to
In one of my really dumb side projects I&amp;rsquo;m making, I have some IBM i code that I&amp;rsquo;d like to keep in my git repository with some other stuff. I could use the Integrated File System (IFS), but truthfully I don&amp;rsquo;t know enough about IBM i yet to use it correctly.
So, in the meantime I have a quick and dirty python script that lets me pull multiple source members based on a config file, repo.</description></item><item><title>RPG and IBM i</title><link>https://barrettotte.github.io/posts/4/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/4/</guid><description>Migrated post from DEV.to
This is my first post to DEV to see if there are any developers on here who have messed around with IBM i before or are interested in learning what it is. Primarily, I will be focusing on the history of IBM i and the RPG programming language that has evolved with it.
At my current workplace, I noticed this ominous green and black screen on numerous older developers' monitors.</description></item><item><title>ColdFusion Service Pinger</title><link>https://barrettotte.github.io/posts/3/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/3/</guid><description>At my job sometimes a few of the legacy services' health in the qa/dev environment decays and there are no robust health checks in place. So, one morning I coded up a quick and dirty page that product owners could hit to get a sanity check when they were checking features.
In summary, this ColdFusion page hits each listed service in the JSON and uses multithreading. This was the first time I ever messed around with multithreading in ColdFusion; It was easier than I thought.</description></item><item><title>ColdFusion cfexecute Example</title><link>https://barrettotte.github.io/posts/2/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/2/</guid><description>Since ColdFusion is very similar to PHP, I wanted to mess around with some of the less-used functions. cfexecute is a function that will pop a shell and execute a program.
In this example program, I just made a &amp;ldquo;wrapper&amp;rdquo; around ping.
execute.cfc
component name=&amp;quot;CF Execute Test&amp;quot; hint=&amp;quot;Messing around with cfexecute built in method.&amp;quot;{ public any function init(){ variables.system32Path = &amp;quot;C:\Windows\system32\&amp;quot;; variables.commands = { &amp;quot;ping&amp;quot;: variables.system32Path &amp;amp; &amp;quot;ping.exe&amp;quot; }; return this; } public struct function getCommandList(){ return variables.</description></item><item><title>Simulating Fishing Rod Bend</title><link>https://barrettotte.github.io/posts/1/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/posts/1/</guid><description>Prototype fishing rod bend for an abandoned fishing game.
This uses Euler Bernoulli Beam Theory to simulate the fishing rod bending.
1// CableComponent.cs 2 3using UnityEngine; 4using System; 5using System.Collections; 6 7 8public class CableComponent : MonoBehaviour { 910[SerializeField] private Transform endPoint; 11[SerializeField] private Material cableMaterial; 1213[SerializeField] private float cableLength = 0.5f; 14[SerializeField] private int totalSegments = 5; 15[SerializeField] private float segmentsPerUnit = 2f; 16 private int segments = 0; 17[SerializeField] private float cableWidth = 0.</description></item><item><title>About</title><link>https://barrettotte.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/about/</guid><description>About General tldr; I&amp;rsquo;m a lifelong student aspiring to be mediocre at everything.
Interests History of Computing CPU Architecture and Design Compilers Analog and Digital Electronics Quantum Computing Hobbies Tinkering CAD and 3D Printing Amateur Radio Self-Studying Watching Anime Weightlifting Favorite Languages C Assembly Python Go TypeScript Socials Anilist Hacker News Email GitHub LinkedIn Career In summary, I&amp;rsquo;m a software engineer with the bulk of my official experience in Java, Angular, and Postgres.</description></item><item><title>Amateur Radio (coming soon)</title><link>https://barrettotte.github.io/misc/radio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/misc/radio/</guid><description>Coming soon&amp;hellip;
Resources and my equipment for Amateur radio.</description></item><item><title>History of Computing Collection</title><link>https://barrettotte.github.io/misc/hoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/misc/hoc/</guid><description>Over the years I&amp;rsquo;ve been collecting various items while I study the history of computing. I hope that one day I make use of every piece in some kind of dumb side project.</description></item><item><title>My Library (coming soon)</title><link>https://barrettotte.github.io/misc/library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://barrettotte.github.io/misc/library/</guid><description>Coming soon&amp;hellip;
This will be a list of books I own with ISBN (if available). It&amp;rsquo;ll probably be a while before I commit to writing down all this data though.</description></item></channel></rss>